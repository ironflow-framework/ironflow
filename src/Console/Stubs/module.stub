<?php

namespace {{namespace}};

use IronFlow\Core\{BaseModule, ModuleMetaData};
use IronFlow\Interfaces\{ViewableInterface, RoutableInterface, ConfigurableInterface, MigratableInterface};

class {{name}}Module extends BaseModule implements
    ViewableInterface,
    RoutableInterface,
    ConfigurableInterface,
    MigratableInterface
{
    protected function defineMetadata(): ModuleMetaData
    {
        return new ModuleMetaData(
            name: '{{name}}',
            version: '1.0.0',
            description: '{{description}}',
            author: '{{author}}',
            dependencies: [],
            provides: ['{{name}}Service'],
            path: __DIR__,
            namespace: __NAMESPACE__,
        );
    }

    public function bootModule(): void
    {
        // Boot logic here
    }

    public function expose(): array
    {
        return [
            '{{name}}Service' => Services\{{name}}Service::class,
        ];
    }

    public function registerViews(): void
    {
        $this->app['view']->addNamespace(
            $this->getViewNamespace(),
            $this->getViewsPath()
        );
    }

    public function getViewsPath(): string
    {
        return $this->getPath('Resources/views');
    }

    public function getViewNamespace(): string
    {
        return strtolower($this->getName());
    }

    public function registerRoutes(): void
    {
        require $this->getRoutesPath();
    }

    public function getRoutesPath(): string
    {
        return $this->getPath('routes/web.php');
    }

    public function getRouteMiddleware(): array
    {
        return ['web'];
    }

    public function getConfigPath(): string
    {
        return $this->getPath('config/' . strtolower($this->getName()) . '.php');
    }

    public function getConfigKey(): string
    {
        return strtolower($this->getName());
    }

    public function publishConfig(): void
    {
        // Handled by ModuleServiceProvider
    }

    public function getMigrationsPath(): string
    {
        return $this->getPath('Database/Migrations');
    }

    public function runMigrations(): void
    {
        // Handled by MigratorManager
    }

    public function rollbackMigrations(): void
    {
        // Handled by MigratorManager
    }
}
